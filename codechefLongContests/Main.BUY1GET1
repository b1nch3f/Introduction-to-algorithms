//FEB13/BUY1GET1
import java.io.*;
import java.math.*;
import java.util.*;
import java.lang.*;
 
public class Main {
    public static void main(String[] args) {
        InputStream inputStream;
        try {
            inputStream = System.in;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        OutputStream outputStream;
        try {
            outputStream = System.out;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        Solver solver = new Solver();
        solver.solve(in, out);
        out.close();
    }
}
 
class Solver {
    public void solve(InputReader in, PrintWriter out) {
        for(int tc = in.nInt(); tc != 0; --tc) {
            char[] str_c = in.nString().toCharArray();
            Set<Character> set = new HashSet<Character>();
            for (char temp : str_c)
                set.add(temp);
            //out.println(set);
            int count = 0;
            List<Integer> list = new ArrayList<Integer>();
            for (char temp2 : set) {
                for (char temp3 : str_c) {
                    if(temp2 == temp3)
                        count++;
                }
                list.add(count);
                count = 0;
            }
            //out.println(list);
            int res = 0;
            for(int temp : list) {
                if(temp %2 == 0)
                    res += temp/2;
                else
                    res += (temp/2) + 1;
            }
            out.println(res);
        }
    }
}
 
class InputReader {
    private InputStream in;
    private byte[] buf = new byte[1024];
    private int curChar, numChars;
 
    public InputReader(InputStream inputStream) {
        in = inputStream;
    }
 
    private int read() {
        if (numChars == -1)
            throw new InputMismatchException();
        if (curChar >= numChars) {
            curChar = 0;
            try {
                numChars = in.read(buf);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }
 
    public int nInt() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }
 
    public long nLong() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        long res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }
 
    public double nDouble() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        double res = 0;
        while (!isSpaceChar(c) && c != '.') {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        }
        if (c == '.') {
            c = read();
            double m = 1;
            while (!isSpaceChar(c)) {
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                m /= 10;
                res += (c - '0') * m;
                c = read();
            }
        }
        return res * sgn;
    }
 
    public char nCharacter() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        return (char) c;
    }
 
    public String nString() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuffer res = new StringBuffer();
        do {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }
 
    public String nLine0() {
        StringBuffer buf = new StringBuffer();
        int c = read();
        while (c != '\n' && c != -1) {
            buf.appendCodePoint(c);
            c = read();
        }
        return buf.toString();
    }
 
    public String nLine() {
        String s = nLine0();
        while (s.trim().length() == 0)
            s = nLine0();
        return s;
    }
 
    private boolean isSpaceChar(int c) {
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }
} 